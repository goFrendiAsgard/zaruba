tasks:

  core.runScript:
    icon: üìî
    description: |
      Run script.
      Common config:
        cmd           : Executable shell name
        cmdArg        : Executable shell argument
        setup         : Setup script
        beforeStart   : Before start script
        start         : Start script
        afterStart    : After start script
        finish        : Finish script
    private: true
    autoTerminate: true
    config:
      cmd: '{{ if .GetValue "defaultShell" }}{{ .GetValue "defaultShell" }}{{ else }}bash{{ end }}'
      cmdArg: "-c"
      setup: ''
      beforeStart: ''
      start: ''
      afterStart: ''
      finish: ''
      _setup: ''
      _start: ''
    env:
      PYTHONUNBUFFERED:
        from: PYTHONUNBUFFERED
        default: 1
    start:
    - '{{ .GetConfig "cmd" }}'
    - '{{ .GetConfig "cmdArg" }}'
    - |
        {{ .Trim (.GetConfig "_setup") "\n " }}
        {{ .Trim (.GetConfig "setup") "\n " }}
        {{ .Trim (.GetConfig "beforeStart") "\n " }}
        {{ .Trim (.GetConfig "_start") "\n " }}
        {{ .Trim (.GetConfig "start") "\n " }}
        {{ .Trim (.GetConfig "afterStart") "\n " }}
        {{ .Trim (.GetConfig "finish") "\n " }}


  core.runShellScript:
    icon: üêö
    description: |
      Run shell script
      Common config:
        start : Start script
    private: true
    extend: core.runScript
    dependencies:
    - core.bootstrap
    configRef: core.shell
    config:
      _setup: |
        set -e
        {{ .Trim (.GetConfig "includeBootstrapScript") "\n" }}
      start: "echo hello world"


  core.runCoreScript:
    icon: üìî
    description: |
      Run script for core tasks
      Common config:
        start : Start script
    private: true
    extend: core.runShellScript
    dependencies:
    - core.bootstrap
    configRef: core.shell
    config:
      _setup: |
        set -e
        alias zaruba=${ZARUBA_HOME}/zaruba
        {{ .Trim (.GetConfig "includeBootstrapScript") "\n" }}
        {{ .Trim (.GetConfig "includeUtilScript") "\n" }}
      start: echo "No script defined"

  
  core.runNvmScript:
    icon: üê∏
    description: Run shell script under nvm
    private: true
    extend: core.runShellScript
    configRefs:
    - core.nvm
    - core.shell
    config:
      _setup: |
        set -e
        {{ .Trim (.GetConfig "includeBootstrapScript") "\n" }}
        {{ .Trim (.GetConfig "includeUtilScript") "\n" }}
        {{ .Trim (.GetConfig "useNvmScript") "\n" }} 
      start: "echo hello world"

  
  core.prepareNodeJsApp:
    icon: üê∏
    description: Prepare NodeJs Application
    private: true
    extend: core.runNvmScript
    config:
      _setup: |
        set -e
        {{ .Trim (.GetConfig "includeBootstrapScript") "\n" }}
        {{ .Trim (.GetConfig "includeUtilScript") "\n" }}
        {{ .Trim (.GetConfig "useNvmScript") "\n" }} 
      _start: |
        {{ .Trim (.GetConfig "removeNodeModulesScript") "\n" }} 
        {{ .Trim (.GetConfig "npmCleanCacheScript") "\n" }} 
        {{ .Trim (.GetConfig "npmInstallScript") "\n" }} 
        {{ .Trim (.GetConfig "npmRebuildScript") "\n" }} 
        {{ .Trim (.GetConfig "tsInstallScript") "\n" }} 
        {{ .Trim (.GetConfig "tsCompileScript") "\n" }} 
      start: "echo Prepare NodeJs App"
  

  core.preparePythonApp:
    icon: üêç
    description: Prepare Python App
    private: true
    extend: core.runShellScript
    config:
      _start: pipenv install
      start: "echo Prepare Python App"


  core.wrapper:
    private: true
    extend: core.runShellScript
    autoTerminate: false
    config:
      start: '{{ .GetConfig "playBellScript" }}'
  

  core.runPythonScript:
    icon: üêç
    description: |
      Run python script
      Common config:
        start : Start script
    private: true
    extend: core.runScript
    config:
      cmd: python
      start: "print('hello world')"


  core.runNodeJsScript:
    icon: üê∏
    description: |
      Run Node.Js script
      Common config:
        start : Start script
    private: true
    extend: core.runScript
    config:
      cmd: node
      cmdArg: "-p"
      start: "console.log('hello world')"


  core.runInContainer:
    icon: üê≥
    description: |
      Run command from inside the container
      Common config:
        containerName : Name of the container
        commands      : Command to be executed, separated by new line
    private: true
    extend: core.runCoreScript
    configRef: core.docker
    config:
      commands: ""
      _start: |
        {{ $this := . -}}
        {{ range $index, $command := .Split (.Trim (.GetConfig "commands") " \n") "\n" -}}
          {{ if ne $command "" -}}
            docker exec "{{ $this.GetConfig "containerName" }}" {{ $command }}
          {{ end -}}
        {{ end -}}

      
  core.mysql.execSql:
    icon: üê¨ 
    private: true
    extend: core.runCoreScript
    configRef: core.docker
    config:
      user: root
      password: '{{ .GetEnv "MYSQL_ROOT_PASSWORD" }}'
      database: '{{ .GetEnv "MYSQL_DATABASE" }}'
      queries: ""
      containerName: ""
      _start: |
        {{ $localTmpFile := printf "%s.tmp.sql" .NewUUIDString -}}
        {{ $err := .WriteFile $localTmpFile (.GetConfig "queries") -}}
        USER="{{ .GetConfig "user" }}"
        PASSWORD="{{ .GetConfig "password" }}"
        CONTAINER_NAME="{{ .GetConfig "containerName" }}"
        LOCAL_TMP_FILE="{{ $localTmpFile }}"
        CONTAINER_TMP_FILE="/{{ .NewUUIDString }}.tmp.sql"
        docker cp "${LOCAL_TMP_FILE}" "${CONTAINER_NAME}:${CONTAINER_TMP_FILE}"
        rm "${LOCAL_TMP_FILE}"
        docker exec "${CONTAINER_NAME}" bash -c "mysql --user=\"${USER}\" --password=\"${PASSWORD}\" < \"${CONTAINER_TMP_FILE}\""
        docker exec "${CONTAINER_NAME}" rm "${CONTAINER_TMP_FILE}"
      start: ""

     
  core.cassandra.execCql:
    icon: üëÄ
    private: true
    extend: core.runCoreScript
    configRef: core.docker
    config:
      user: cassandra
      password: cassandra
      keyspace: sample
      queries: ""
      containerName: ""
      _start: |
        {{ $localTmpFile := printf "%s.tmp.sql" .NewUUIDString -}}
        {{ $err := .WriteFile $localTmpFile (.GetConfig "queries") -}}
        USER="{{ .GetConfig "user" }}"
        PASSWORD="{{ .GetConfig "password" }}"
        CONTAINER_NAME="{{ .GetConfig "containerName" }}"
        LOCAL_TMP_FILE="{{ $localTmpFile }}"
        CONTAINER_TMP_FILE="/{{ .NewUUIDString }}.tmp.sql"
        docker cp "${LOCAL_TMP_FILE}" "${CONTAINER_NAME}:${CONTAINER_TMP_FILE}"
        rm "${LOCAL_TMP_FILE}"
        docker exec "${CONTAINER_NAME}" cqlsh -u "${USER}" -p "${PASSWORD}" -f "${CONTAINER_TMP_FILE}"
        docker exec "${CONTAINER_NAME}" rm "${CONTAINER_TMP_FILE}"
      start: ""